const cookieSession = require("cookie-session");
const express = require("express");
const app = express();
const port = 8080;
const passport = require("passport");
const passportSetup = require("../config/passport-setup");
const session = require("express-session");
const keys = require("../config/key");
const authRoutes = require("../routes/auth-routes");
const cors = require("cors");
const cookieParser = require("cookie-parser"); // parse cookie header
const mongoose = require("mongoose");
const RaffleData = require("../models/raffle");

// connect to mongodb
mongoose.connect(keys.MONGODB_URI, () => {
    console.log("connected to mongo db");
});
// const addRaffle = async () => {
//   const newRaffle = await new RaffleData({
//     name: "ETH Raffle",
//     tweetId: "1615321644247166976",
//     price: 0.25,
//     image: "0-25ETH.png",
//     total: 7000,
//     entered: 1255,
//     remaining: 5745,
//     description: `Participant can now get Free ETH and Free NFTs (Coming soon) Just by Participating in our Free Raffles.Please follow the Steps required to enter.

//     We are Web 3 Raffle Platform for Crypto/NFT Enthusiasts to win Free/Paid NFTs and Crypto Prizes. Our first Raffle, where user can participate for free and get a chance to win ETH. The winner will be announced once all the required formalities are done as per the requirements.

//     Steps to follow:

//     Follow Hotlootâ€™s Twitter

//     Like, and Retweet the raffle tweet
//     and lastly,

//     Verify your email (Hotloots has a Right to disqualify suspicious entries.)`,
//   }).save();
// };
// addRaffle();
app.use(
    cookieSession({
        name: "session",
        keys: [keys.COOKIE_KEY],
        maxAge: 86400000,
        // sameSite: app.get("env") === "production" ? true : false,
        // secure: false,
    })
);
// app.set("trust proxy", 1);
// parse cookies
app.use(cookieParser());

// initalize passport
app.use(passport.initialize());
// deserialize cookie from the browser
app.use(passport.session());

// set up cors to allow us to accept requests from our client
app.use(
    cors({
        origin: "http://localhost:3000", // allow to server to accept request from different origin
        methods: "GET,HEAD,PUT,PATCH,POST,DELETE",
        credentials: true, // allow session cookie from browser to pass through
    })
);

// set up routes
app.use("/auth", authRoutes);

const authCheck = (req, res, next) => {
    if (!req.user) {
        res.status(401).json({
            authenticated: false,
            message: "user has not been authenticated",
        });
    } else {
        next();
    }
};

// if it's already login, send the profile response,
// otherwise, send a 401 response that the user is not authenticated
// authCheck before navigating to home page
app.get("/", authCheck, (req, res) => {
    res.status(200).json({
        authenticated: true,
        message: "user successfully authenticated",
        user: req.user,
        cookies: req.cookies,
    });
});

// connect react to nodejs express server
app.listen(port, () => console.log(`Server is running on port ${port}!`));
