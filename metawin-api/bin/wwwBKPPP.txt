const cookieSession = require("cookie-session");
const express = require("express");
const app = express();
const port = 8080;
const passport = require("passport");
const passportSetup = require("../config/passport-setup");
const session = require("express-session");
const http = require('http');
const bodyParser = require('body-parser');
const path = require('path');
const v1 = require('../routes/v1');
const keys = require("../config/key");
const authRoutes = require("../routes/auth-routes");
const cors = require("cors");
const { Server } = require("socket.io");
const cookieParser = require("cookie-parser"); // parse cookie header
const mongoose = require("mongoose");
const RaffleData = require("../models/raffle");
const server = http.createServer(app);
const io = new Server(server, { transports: ["websocket"] });
const fullpath = path.resolve(__dirname);



// connect to mongodb
mongoose.connect(keys.MONGODB_URI, () => {
    console.log("connected to mongo db");
});

app.use(
    cookieSession({
        name: "session",
        keys: [keys.COOKIE_KEY],
        maxAge: 86400000,
    })
);
app.use(cookieParser());

// initalize passport
app.use(passport.initialize());
// deserialize cookie from the browser
app.use(passport.session());

// set up cors to allow us to accept requests from our client
app.use(
    cors({
        origin: "http://localhost:3000", // allow to server to accept request from different origin
        methods: "GET,HEAD,PUT,PATCH,POST,DELETE",
        credentials: true, // allow session cookie from browser to pass through
    })
);

// set up routes
app.use("/auth", authRoutes);

const authCheck = (req, res, next) => {
    if (!req.user) {
        res.status(401).json({
            authenticated: false,
            message: "user has not been authenticated",
        });
    } else {
        next();
    }
};

// if it's already login, send the profile response,
// otherwise, send a 401 response that the user is not authenticated
// authCheck before navigating to home page
app.get("/", authCheck, (req, res) => {
    res.status(200).json({
        authenticated: true,
        message: "user successfully authenticated",
        user: req.user,
        cookies: req.cookies,
    });
});

app.use('*', cors());
// app.set('socketio', io);
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json({ limit: '100mb' }));
app.use('/v1', v1);
app.use(function (req, res, next) {
    res.header("Access-Control-Allow-Origin", "*");
    res.header('Access-Control-Allow-Methods: POST, GET, OPTIONS, PUT, DELETE');
    res.header('Access-Control-Allow-Headers: Origin, Content-Type, Accept, Authorization, X- Request-With');
    next();
});


// connect react to nodejs express server
app.listen(port, () => console.log(`Server is running on port ${port}!`));
